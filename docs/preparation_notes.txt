Raspberry Pi Clock & Weather Display (rpi_clock)

Preparation Notes

=======================================================
System requirements
=======================================================

* Hardware

	- Raspberry Pi 2 or 3; maybe an earlier model too
	- HDMI display and cable
	- Quimat 3.5-inch TFT Touch Screen, 320x480 Resolution LCD Display with: 
		-- "Protective Case" (easily breaks)
		-- 3 Heat Sinks
		-- Touch Pen (useful and required for the calibration test)

* Operating system: Raspbian Stretch Lite

	Tested with Raspbian Stretch 2018-11-13

* Software

	- Python 3 (rpi_clock will not run with Python 2)
	- python3-tk and dependencies, including tk, tcl, and libx11
	- git
	- ntp
	- rng-tools
	- https://github.com/goodtft/LCD-show
	- https://github.com/texadactyl/rpi_clock
	- Open Weather Map API (https://openweathermap.org/api)

===============================================================
On a Linux, Mac, or Windows desktop system, prepare the MicroSD
===============================================================

* Go to https://www.raspberrypi.org/downloads/raspbian/

* Download Raspbian Stretch Lite (latest) ==> a zip file.

* Extract the img file from the zip file.

* Write img to the MicroSD device. 
  Mac and Windows user can follow the instructions provided by RaspberryPi.org.
  Instructions for a Linux or Unix PC follow:

     - Insert the MicroSD into a MicroSD caddy adapter which has a USB plug for your desktop computer.
     - Then, insert the caddy into a USB connector on your desktop computer.
     - ***** MAKE SURE THAT YOU ARE WRITING TO THE DESIRED DEVICE *****
       You can use the `mount` command without parameters to show what was just mounted when you plugged in the caddy.
     - ***** `dd` CANNOT BE UNDONE !!!!!
     - On my Linux desktop, my USB device turned out to be /dev/sdc and two existing partitions {sdc1, sdc2} were
       automounted.
     - You must un-mount (`sudo umount`) any old partitions on the MicroSD drive before using `dd`.
     - For me recently (an example), the following is how I proceeded:
          sudo umount /dev/sdc1     # Unmount an old boot partition
          sudo umount /dev/sdc2     # Unmount an old "/" partition
          sudo dd if=$HOME/Downloads/2017-09-07-raspbian-stretch.img of=/dev/sdc bs=4M
     - Note that I used "sdc" (entire device) and not "sdc1" (partition) as the target of `dd`.

===================================================================
Set up on the Raspberry Pi target system with HDMI display
===================================================================

* Install MicroSD in RPi and perform 1st boot

* Login as pi with password=raspberry.

* Change the password for user pi to avoid future SSH client complaints:

	sudo raspi-config
		1 Change User Password Change password for the current user

* Non-UK only (E.g. USA):

	sudo raspi-config
		4 Localization Options
			I1 Locale		# For USA: set to en_US.UTF-8
			I2 Timezone		# Set to local timezone as appropriate for your region
			I3 Keyboard Layout	# For USA: set to Generic 104-key PC, English (US) layout
			I4 Wifi Country		# Set the country for your Wifi

* Install SSH daemon services:

	sudo raspi-config
		5 Interfacing Options
			P2 SSH (Enable the SSH server)

* If you are using Wifi, connect to your router now.

* Keep the current host name for the moment (raspberrypi).

* Suggested: Create a static IP address for convenience with an external SSH client.

	Assuming that: 

		You are using Wifi and your wireless device is wlan0.
		The desired IP address for the Raspberry Pi = 192.168.1.103
		The router IP address = 192.168.1.1

	Append to /etc/dhcpcd.conf:

		interface wlan0
		static ip_address=192.168.1.103/24
		static routers=192.168.1.1
		static domain_name_servers=192.168.1.1

	Note that if you are using wired Ethernet and its device name is eth0,
	then specify this interface instead:

		interface eth0
      
* sudo reboot

* The remaining steps can be performed with an SSH client to the Pi.

=============================================================================
Update the base system since the img file was made available for downloading.
=============================================================================

* sudo apt update

# The next step will run like a tortoise.  Patience.
# Press return/enter to keep current configurations when prompted.
* sudo apt -y dist-upgrade 
* sudo apt -y install python3-tk git ntp rng-tools

* sudo shutdown now # for hardware assembly

# Unplug power connector.

=============================================================================
Do hardware assembly.
=============================================================================

* The hardware installation is indicated with a picture and no guidance.  Line up pins as shown.

* Plug power connector back in ---> Power up.

======================================================
After Reboot
======================================================

* git clone https://github.com/goodtft/LCD-show.git
* chmod -R 755 LCD-show
* cd LCD-show/
* sudo bash ./LCD35-show

======================================================
Screen Orientation
======================================================

I stood the display up such that the power chord and HDMI adapter 
re pointing up (the way I wanted for deployment).
This setting in /boot/config.txt worked for me:

	dtoverlay=tft35a:rotate=270

As an aside, I experimented with rotate values and observed:

	rotate=0 	start of display area is at physical left
	rotate=90 	start of display area is at physical bottom (up-side down)
	rotate=180 	start of display area is at physical right
	rotate=270 	start of display area is at physical top (right-side up)

Then, sudo reboot

======================================================
Touchcreen Calibration
Fix the calibration section manually (ugh!).
Might be useful: http://www.lcdwiki.com/3.5inch_RPi_Display
======================================================

* Follow github LCD-show touchscreen calibration instructions on the supplied DVD from Quimat.
  Update /etc/X11/xorg.conf.d/99-calibration.conf as indicated.

     sudo dpkg -i -B xinput-calibrator_0.7.5-1_armhf.deb
     DISPLAY=:0.0
     xinput_calibrator # difficult to do on small screen!!!

* To get the mouse-pointer to move in the same direction as the pen or a finger on the touch-screen, 
  I added the following just before EndSection in /etc/X11/xorg.conf.d/99-calibration.conf:

    Option "InvertY" "true"
    Option "InvertX" "true"

======================================================
Stop X from timing out the display and going blank.
======================================================

* Optional: Stop X from timing out the display and going blank:
  Create or append /etc/X11/xorg.conf as follows:

	Section "ServerFlags"
	Option "blank time" "0"
	Option "standby time" "0"
	Option "suspend time" "0"
	Option "off time" "0"
	EndSection 

* sudo reboot

======================================================
 Install rpi_clock
======================================================

* Login as pi if not already autologged in as pi

* git clone https://github.com/texadactyl/rpi_clock

* Copy $HOME/rpi_clock/bin/sample_config.txt to $HOME/rpi_clock/bin/rpi_clock.cfg

* Edit $HOME/rpi_clock/bin/rpi_clock.cfg:

	LOCATION = your location
		# I live in USA zip code 75248 so my specification was this:
		# LOCATION = zip=75248,us
		# This might help as a syntax guide: https://openweathermap.org/current
	OWM_API_KEY = Your Open Weather Map API key
	TEMP_UNITS = Temperature units in your culture
		# metric (Celsius), imperial (Farenheit), or Kelvin (Science enthousiasts)
		# I live in the USA so my specification was this:
		# TEMP_UNITS = imperial
	FORMAT_DATE = Your cultural date format (see Python 3 time.strftime() function)
		# I used this: FORMAT_DATE = %%b %%d, %%Y
		# (Yes, you need to double '%' to get one '%'.)
	FORMAT_TIME = Your cultural time format (see Python 3 time.strftime() function)
		# I used this: FORMAT_TIME = %%I:%%M %%p %%Z
		# (Yes, you need to double '%' to get one '%'.)
	FLAG_WINDOWED = False
		# Set True only if you are running on a multi-window big-enough display
		# on a PC.  I know of at least one person who is doing this.
	
* Append $HOME/.profile with:

	PARENT=$HOME # <--- Assign PARENT to wherever the rpi_clock directory tree is immediately under.
	(cd $PARENT/rpi_clock/bin; python3 rpi_clock.py rpi_clock.cfg 2>&1 > $PARENT/rpi_clock/rpi_clock.log) &

* Get rid of zenity "Your Raspbian system has been upgraded …” messages 
which overlay the display by executing the following command:

	rm $HOME/.config/autostart/pi-conf-backup.desktop

* sudo reboot

======================================================
Finally
======================================================

The rpi_clock application should now be running using the touchscreen display.
If you touch the screen, a 2nd screen will prompt you to do one of the following:

	Go back to the date, time, and weather display.
	Restart the Raspberry Pi.
	Shutdown the Raspberry Pi.

======================================================
References
======================================================

* rpi_clock project: https://github.com/texadactyl/rpi_clock
* Open Weather Map API: https://openweathermap.org/api
* Python 3 language reference: https://docs.python.org/3/reference/
* Python 3 standard library reference: https://docs.python.org/3/library/
* Python 3 Tk reference: https://docs.python.org/3/library/tk.html
* Github reference: https://guides.github.com/
* Quimat documents & software: https://github.com/goodtft/LCD-show

